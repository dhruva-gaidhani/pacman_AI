# -*- generated by 1.1.0b12 -*-
import da
PatternExpr_175 = da.pat.TuplePattern([da.pat.ConstantPattern('Pong')])
PatternExpr_180 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('Pong')])])
PatternExpr_207 = da.pat.TuplePattern([da.pat.ConstantPattern('Ping')])
PatternExpr_212 = da.pat.FreePattern('ping')
_config_object = {}

class Ping(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._PingReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PingReceivedEvent_0', PatternExpr_175, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, pong, **rest_260):
        super().setup(pong=pong, **rest_260)
        self._state.pong = pong
        pass

    def run(self):
        self.send(('Ping',), to=self._state.pong)
        super()._label('_st_label_172', block=False)
        _st_label_172 = 0
        while (_st_label_172 == 0):
            _st_label_172 += 1
            if PatternExpr_180.match_iter(self._PingReceivedEvent_0, SELF_ID=self._id):
                _st_label_172 += 1
            else:
                super()._label('_st_label_172', block=True)
                _st_label_172 -= 1
        self.output('Ponged.')

class Pong(da.DistProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._PongReceivedEvent_0 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_PongReceivedEvent_0', PatternExpr_207, sources=[PatternExpr_212], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, **rest_260):
        super().setup(**rest_260)
        pass

    def run(self):
        super()._label('_st_label_204', block=False)
        ping = None

        def ExistentialOpExpr_205():
            nonlocal ping
            for (_, (_, _, ping), (_ConstantPattern223_,)) in self._PongReceivedEvent_0:
                if (_ConstantPattern223_ == 'Ping'):
                    if True:
                        return True
            return False
        _st_label_204 = 0
        while (_st_label_204 == 0):
            _st_label_204 += 1
            if ExistentialOpExpr_205():
                _st_label_204 += 1
            else:
                super()._label('_st_label_204', block=True)
                _st_label_204 -= 1
        self.output('Pinged.')
        self.send(('Pong',), to=ping)

class Node_(da.NodeProcess):

    def __init__(self, procimpl, forwarder, **props):
        super().__init__(procimpl, forwarder, **props)
        self._events.extend([])

    def run(self):
        pong = self.new(Pong, args=(), at='PongNode')
        ping = self.new(Ping, args=(pong,))
        self._start(pong)
        self._start(ping)
